{"version":3,"sources":["components/gamecell.jsx","components/gameboard.jsx","components/navbar.jsx","App.js","index.js"],"names":["gamecell","value","buttonClasses","this","props","tile","onClick","onCellPress","className","buttonLook","style","outline","boxShadow","Component","gameboard","dimmensions","tiles","disable","rows","index","x","columns","y","push","id","width","height","pointerEvents","opacity","cellSpacing","cellPadding","NavBar","onReset","moves","href","App","state","size","moveCounter","handleCellPress","clicked","indexOf","empty","findIndex","t","checkLegalMove","temp","setState","gameComplete","handleReset","boardSize","document","getElementById","newBoard","generateBoard","clickedIndex","emptyIndex","values","i","j","Math","floor","random","length","randNum","splice","finished","count","statement","toString","toast","success","Fragment","position","autoClose","hideProgressBar","closeOnClick","draggable","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f3a16344.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass gamecell extends Component {\n    buttonLook(value){\n        let buttonClasses = \"btn \";\n        if(value===0){buttonClasses += \" btn-dark\";}\n        else{buttonClasses += \" btn-secondary\";}\n        buttonClasses+= \" w-100 h-100 rounded-0\"\n        return buttonClasses;\n    }\n\n    render() {\n        const {tile,value}=this.props;\n        return (  \n            <button onClick={()=>this.props.onCellPress(tile)} className={this.buttonLook(value)} style={{outline:'none',boxShadow:'none'}}>{value}</button>\n        );\n    }\n}\n \nexport default gamecell;","import React, {Component} from 'react';\nimport GameCell from './gamecell';\nclass gameboard extends Component {\n\n    render() { \n        const {dimmensions,tiles,onCellPress,disable} = this.props;\n        const rows = [];\n        let index = 0;\n        for (let x = 0; x<dimmensions; x++)\n        {   \n            const columns = []\n            for(let y=0;y<dimmensions;y++)\n            {\n                const tile = tiles[index];\n                columns.push(\n                    <td id={tile.id} width=\"50em\" height=\"50em\">\n                            <GameCell \n                                key={tile.id}\n                                value={tile.value}\n                                id={this.props}\n                                onCellPress={onCellPress}\n                                tile = {tile}>\n                            </GameCell>\n                    </td>\n                    )\n                    index+=1;\n            }\n            rows.push(<tr>{columns}</tr>);\n        }\n        \n        return( \n            <div style={disable ? {pointerEvents:\"none\",opacity:\"0.4\"} : {} }>\n                \n                <table className=\"mx-auto mt-2\" cellSpacing=\"0\" cellPadding=\"0\">\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n \nexport default gameboard;","import React, {Component} from 'react';\nclass NavBar extends Component {\n    render() { \n        const {onReset,moves} = this.props;\n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <h1 href=\"\" className=\"navbar-brand\">\n                    Moves: <span className=\"badge badge-pill badge-secondary\">{moves}</span>\n                </h1>\n                <div>\n                    <select id=\"difficulty\" className=\"mr-2\">\n                        <option value=\"Normal\">Normal</option>\n                        <option value=\"Hard\">Hard</option>\n                    </select>\n                    <button onClick={onReset} className=\"btn btn-secondary\">Reset</button>\n                </div>\n            </nav>\n        );\n    }\n}\n \nexport default NavBar;","import React, {Component} from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport GameBoard from './components/gameboard';\nimport NavBar from './components/navbar'\n\nclass App extends Component {\n  state={\n    size:0,\n    tiles:[],\n    moveCounter:0,\n    disable:false,\n  };\n  constructor(props){\n    super(props);\n    var boardSize = 3\n    var newBoard = this.generateBoard(boardSize*boardSize)\n    this.state = {\n      tiles:newBoard,\n      size:boardSize,\n      moveCounter:0,\n      disable:false\n    }\n  }\n\n  handleCellPress = (tile) => {\n      // switch then check for victory\n      const tiles = [...this.state.tiles];\n      var clicked = tiles.indexOf(tile);\n      var empty = tiles.findIndex(t => t.value===0);\n      var moves = this.state.moveCounter;\n      moves++;\n      var legal = this.checkLegalMove(clicked+1,empty+1)\n      if (legal === false){return}\n      tiles[clicked] = {...tile};\n      tiles[empty] = {...tiles[empty]};\n      var temp = tiles[clicked].value;\n      tiles[empty].value = temp;\n      tiles[clicked].value = 0;\n      this.setState({\n        tiles:tiles,\n        moveCounter:moves\n      }, this.gameComplete);\n      \n  }\n\n  handleReset = () => {\n      var resetMove=0;\n      var boardSize = 3\n      var x = document.getElementById(\"difficulty\");\n      var difficulty = x.value;\n      if (difficulty===\"Hard\"){boardSize=5}\n      var newBoard = this.generateBoard(boardSize*boardSize);\n      this.setState({\n          moveCounter:resetMove,\n          tiles:newBoard,\n          size:boardSize,\n          disable:false,\n      });\n  }\n\n  checkLegalMove(clickedIndex,emptyIndex){\n      var boardSize = this.state.size;\n      if (clickedIndex === emptyIndex){return false}\n      if (clickedIndex-1 === emptyIndex && (clickedIndex-1)%boardSize!==0){return true;}\n      if (clickedIndex+1 === emptyIndex && (clickedIndex)%boardSize!==0){return true;}\n      if (clickedIndex-boardSize === emptyIndex){return true;}\n      if (clickedIndex+boardSize === emptyIndex){return true;}\n      return false;\n  }\n\n  generateBoard(boardSize){\n      var newBoard = [];\n      var values = []\n      for(var i = 0; i < boardSize; i++){\n          values.push(i);\n      }\n      for(var j = 0; j < boardSize; j++){\n        var index = Math.floor(Math.random()* values.length);\n        var randNum = values[index];\n        values.splice(index,1)\n        newBoard.push({id:j,value:randNum})\n      }\n      return newBoard;\n  }\n  gameComplete(){\n    var finished = true;\n    for(var count = 0; count < this.state.tiles.length; count++)\n      {\n        if(this.state.tiles[count].id!==this.state.tiles[count].value-1 && this.state.tiles[count].value!==0)\n        {\n            finished = false;\n            break;\n        }\n      }\n     if(!finished){return;}\n    var statement = \"Finished in \" + this.state.moveCounter.toString() + \" moves!\";\n    toast.success(statement);\n    this.setState({disable:true})\n    }\n\n  render() { \n    return ( \n      <React.Fragment>\n        <NavBar moves={this.state.moveCounter} onReset={this.handleReset}/>\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={12000}\n            hideProgressBar={false}\n            closeOnClick\n            draggable={false}\n          />\n          <GameBoard\n            disable={this.state.disable}\n            tiles={this.state.tiles}\n            dimmensions={this.state.size}\n            onCellPress={this.handleCellPress}\n          />\n          <h1>Rules:</h1>\n          <p>Arrange the tiles in numerical order from 1 to x. Last tile should be 0.<br/> The 0 space counts as empty and is used to swap around with orthogonally adjacent tiles.</p>\n          \n\n      </React.Fragment>\n    );\n  }\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {ToastContainer,toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}